{"ast":null,"code":"/*! Fast Average Color | Â© 2023 Denis Seleznev | MIT License | https://github.com/fast-average-color/fast-average-color */\nfunction toHex(num) {\n  var str = num.toString(16);\n  return str.length === 1 ? '0' + str : str;\n}\nfunction arrayToHex(arr) {\n  return '#' + arr.map(toHex).join('');\n}\nfunction isDark(color) {\n  // http://www.w3.org/TR/AERT#color-contrast\n  var result = (color[0] * 299 + color[1] * 587 + color[2] * 114) / 1000;\n  return result < 128;\n}\nfunction prepareIgnoredColor(color) {\n  if (!color) {\n    return [];\n  }\n  return isRGBArray(color) ? color : [color];\n}\nfunction isRGBArray(value) {\n  return Array.isArray(value[0]);\n}\nfunction isIgnoredColor(data, index, ignoredColor) {\n  for (var i = 0; i < ignoredColor.length; i++) {\n    if (isIgnoredColorAsNumbers(data, index, ignoredColor[i])) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction isIgnoredColorAsNumbers(data, index, ignoredColor) {\n  switch (ignoredColor.length) {\n    case 3:\n      // [red, green, blue]\n      if (isIgnoredRGBColor(data, index, ignoredColor)) {\n        return true;\n      }\n      break;\n    case 4:\n      // [red, green, blue, alpha]\n      if (isIgnoredRGBAColor(data, index, ignoredColor)) {\n        return true;\n      }\n      break;\n    case 5:\n      // [red, green, blue, alpha, threshold]\n      if (isIgnoredRGBAColorWithThreshold(data, index, ignoredColor)) {\n        return true;\n      }\n      break;\n    default:\n      return false;\n  }\n}\nfunction isIgnoredRGBColor(data, index, ignoredColor) {\n  // Ignore if the pixel are transparent.\n  if (data[index + 3] !== 255) {\n    return true;\n  }\n  if (data[index] === ignoredColor[0] && data[index + 1] === ignoredColor[1] && data[index + 2] === ignoredColor[2]) {\n    return true;\n  }\n  return false;\n}\nfunction isIgnoredRGBAColor(data, index, ignoredColor) {\n  if (data[index + 3] && ignoredColor[3]) {\n    return data[index] === ignoredColor[0] && data[index + 1] === ignoredColor[1] && data[index + 2] === ignoredColor[2] && data[index + 3] === ignoredColor[3];\n  }\n  // Ignore rgb components if the pixel are fully transparent.\n  return data[index + 3] === ignoredColor[3];\n}\nfunction inRange(colorComponent, ignoredColorComponent, value) {\n  return colorComponent >= ignoredColorComponent - value && colorComponent <= ignoredColorComponent + value;\n}\nfunction isIgnoredRGBAColorWithThreshold(data, index, ignoredColor) {\n  var redIgnored = ignoredColor[0];\n  var greenIgnored = ignoredColor[1];\n  var blueIgnored = ignoredColor[2];\n  var alphaIgnored = ignoredColor[3];\n  var threshold = ignoredColor[4];\n  var alphaData = data[index + 3];\n  var alphaInRange = inRange(alphaData, alphaIgnored, threshold);\n  if (!alphaIgnored) {\n    return alphaInRange;\n  }\n  if (!alphaData && alphaInRange) {\n    return true;\n  }\n  if (inRange(data[index], redIgnored, threshold) && inRange(data[index + 1], greenIgnored, threshold) && inRange(data[index + 2], blueIgnored, threshold) && alphaInRange) {\n    return true;\n  }\n  return false;\n}\nvar DEFAULT_DOMINANT_DIVIDER = 24;\nfunction dominantAlgorithm(arr, len, options) {\n  var colorHash = {};\n  var divider = options.dominantDivider || DEFAULT_DOMINANT_DIVIDER;\n  var ignoredColor = options.ignoredColor;\n  var step = options.step;\n  var max = [0, 0, 0, 0, 0];\n  for (var i = 0; i < len; i += step) {\n    var red = arr[i];\n    var green = arr[i + 1];\n    var blue = arr[i + 2];\n    var alpha = arr[i + 3];\n    if (ignoredColor && isIgnoredColor(arr, i, ignoredColor)) {\n      continue;\n    }\n    var key = Math.round(red / divider) + ',' + Math.round(green / divider) + ',' + Math.round(blue / divider);\n    if (colorHash[key]) {\n      colorHash[key] = [colorHash[key][0] + red * alpha, colorHash[key][1] + green * alpha, colorHash[key][2] + blue * alpha, colorHash[key][3] + alpha, colorHash[key][4] + 1];\n    } else {\n      colorHash[key] = [red * alpha, green * alpha, blue * alpha, alpha, 1];\n    }\n    if (max[4] < colorHash[key][4]) {\n      max = colorHash[key];\n    }\n  }\n  var redTotal = max[0];\n  var greenTotal = max[1];\n  var blueTotal = max[2];\n  var alphaTotal = max[3];\n  var count = max[4];\n  return alphaTotal ? [Math.round(redTotal / alphaTotal), Math.round(greenTotal / alphaTotal), Math.round(blueTotal / alphaTotal), Math.round(alphaTotal / count)] : options.defaultColor;\n}\nfunction simpleAlgorithm(arr, len, options) {\n  var redTotal = 0;\n  var greenTotal = 0;\n  var blueTotal = 0;\n  var alphaTotal = 0;\n  var count = 0;\n  var ignoredColor = options.ignoredColor;\n  var step = options.step;\n  for (var i = 0; i < len; i += step) {\n    var alpha = arr[i + 3];\n    var red = arr[i] * alpha;\n    var green = arr[i + 1] * alpha;\n    var blue = arr[i + 2] * alpha;\n    if (ignoredColor && isIgnoredColor(arr, i, ignoredColor)) {\n      continue;\n    }\n    redTotal += red;\n    greenTotal += green;\n    blueTotal += blue;\n    alphaTotal += alpha;\n    count++;\n  }\n  return alphaTotal ? [Math.round(redTotal / alphaTotal), Math.round(greenTotal / alphaTotal), Math.round(blueTotal / alphaTotal), Math.round(alphaTotal / count)] : options.defaultColor;\n}\nfunction sqrtAlgorithm(arr, len, options) {\n  var redTotal = 0;\n  var greenTotal = 0;\n  var blueTotal = 0;\n  var alphaTotal = 0;\n  var count = 0;\n  var ignoredColor = options.ignoredColor;\n  var step = options.step;\n  for (var i = 0; i < len; i += step) {\n    var red = arr[i];\n    var green = arr[i + 1];\n    var blue = arr[i + 2];\n    var alpha = arr[i + 3];\n    if (ignoredColor && isIgnoredColor(arr, i, ignoredColor)) {\n      continue;\n    }\n    redTotal += red * red * alpha;\n    greenTotal += green * green * alpha;\n    blueTotal += blue * blue * alpha;\n    alphaTotal += alpha;\n    count++;\n  }\n  return alphaTotal ? [Math.round(Math.sqrt(redTotal / alphaTotal)), Math.round(Math.sqrt(greenTotal / alphaTotal)), Math.round(Math.sqrt(blueTotal / alphaTotal)), Math.round(alphaTotal / count)] : options.defaultColor;\n}\nfunction getDefaultColor(options) {\n  return getOption(options, 'defaultColor', [0, 0, 0, 0]);\n}\nfunction getOption(options, name, defaultValue) {\n  return options[name] === undefined ? defaultValue : options[name];\n}\nvar MIN_SIZE = 10;\nvar MAX_SIZE = 100;\nfunction isSvg(filename) {\n  return filename.search(/\\.svg(\\?|$)/i) !== -1;\n}\nfunction getOriginalSize(resource) {\n  if (isInstanceOfHTMLImageElement(resource)) {\n    var width = resource.naturalWidth;\n    var height = resource.naturalHeight;\n    // For SVG images with only viewBox attribute\n    if (!resource.naturalWidth && isSvg(resource.src)) {\n      width = height = MAX_SIZE;\n    }\n    return {\n      width: width,\n      height: height\n    };\n  }\n  if (isInstanceOfHTMLVideoElement(resource)) {\n    return {\n      width: resource.videoWidth,\n      height: resource.videoHeight\n    };\n  }\n  return {\n    width: resource.width,\n    height: resource.height\n  };\n}\nfunction getSrc(resource) {\n  if (isInstanceOfHTMLCanvasElement(resource)) {\n    return 'canvas';\n  }\n  if (isInstanceOfOffscreenCanvas(resource)) {\n    return 'offscreencanvas';\n  }\n  if (isInstanceOfImageBitmap(resource)) {\n    return 'imagebitmap';\n  }\n  return resource.src;\n}\nfunction isInstanceOfHTMLImageElement(resource) {\n  return typeof HTMLImageElement !== 'undefined' && resource instanceof HTMLImageElement;\n}\nvar hasOffscreenCanvas = typeof OffscreenCanvas !== 'undefined';\nfunction isInstanceOfOffscreenCanvas(resource) {\n  return hasOffscreenCanvas && resource instanceof OffscreenCanvas;\n}\nfunction isInstanceOfHTMLVideoElement(resource) {\n  return typeof HTMLVideoElement !== 'undefined' && resource instanceof HTMLVideoElement;\n}\nfunction isInstanceOfHTMLCanvasElement(resource) {\n  return typeof HTMLCanvasElement !== 'undefined' && resource instanceof HTMLCanvasElement;\n}\nfunction isInstanceOfImageBitmap(resource) {\n  return typeof ImageBitmap !== 'undefined' && resource instanceof ImageBitmap;\n}\nfunction prepareSizeAndPosition(originalSize, options) {\n  var srcLeft = getOption(options, 'left', 0);\n  var srcTop = getOption(options, 'top', 0);\n  var srcWidth = getOption(options, 'width', originalSize.width);\n  var srcHeight = getOption(options, 'height', originalSize.height);\n  var destWidth = srcWidth;\n  var destHeight = srcHeight;\n  if (options.mode === 'precision') {\n    return {\n      srcLeft: srcLeft,\n      srcTop: srcTop,\n      srcWidth: srcWidth,\n      srcHeight: srcHeight,\n      destWidth: destWidth,\n      destHeight: destHeight\n    };\n  }\n  var factor;\n  if (srcWidth > srcHeight) {\n    factor = srcWidth / srcHeight;\n    destWidth = MAX_SIZE;\n    destHeight = Math.round(destWidth / factor);\n  } else {\n    factor = srcHeight / srcWidth;\n    destHeight = MAX_SIZE;\n    destWidth = Math.round(destHeight / factor);\n  }\n  if (destWidth > srcWidth || destHeight > srcHeight || destWidth < MIN_SIZE || destHeight < MIN_SIZE) {\n    destWidth = srcWidth;\n    destHeight = srcHeight;\n  }\n  return {\n    srcLeft: srcLeft,\n    srcTop: srcTop,\n    srcWidth: srcWidth,\n    srcHeight: srcHeight,\n    destWidth: destWidth,\n    destHeight: destHeight\n  };\n}\nvar isWebWorkers = typeof window === 'undefined';\nfunction makeCanvas() {\n  if (isWebWorkers) {\n    return hasOffscreenCanvas ? new OffscreenCanvas(1, 1) : null;\n  }\n  return document.createElement('canvas');\n}\nvar ERROR_PREFIX = 'FastAverageColor: ';\nfunction getError(message) {\n  return Error(ERROR_PREFIX + message);\n}\nfunction outputError(error, silent) {\n  if (!silent) {\n    console.error(error);\n  }\n}\nvar FastAverageColor = /** @class */function () {\n  function FastAverageColor() {\n    this.canvas = null;\n    this.ctx = null;\n  }\n  FastAverageColor.prototype.getColorAsync = function (resource, options) {\n    if (!resource) {\n      return Promise.reject(getError('call .getColorAsync() without resource'));\n    }\n    if (typeof resource === 'string') {\n      // Web workers\n      if (typeof Image === 'undefined') {\n        return Promise.reject(getError('resource as string is not supported in this environment'));\n      }\n      var img = new Image();\n      img.crossOrigin = options && options.crossOrigin || '';\n      img.src = resource;\n      return this.bindImageEvents(img, options);\n    } else if (isInstanceOfHTMLImageElement(resource) && !resource.complete) {\n      return this.bindImageEvents(resource, options);\n    } else {\n      var result = this.getColor(resource, options);\n      return result.error ? Promise.reject(result.error) : Promise.resolve(result);\n    }\n  };\n  /**\n   * Get the average color from images, videos and canvas.\n   */\n  FastAverageColor.prototype.getColor = function (resource, options) {\n    options = options || {};\n    var defaultColor = getDefaultColor(options);\n    if (!resource) {\n      var error = getError('call .getColor() without resource');\n      outputError(error, options.silent);\n      return this.prepareResult(defaultColor, error);\n    }\n    var originalSize = getOriginalSize(resource);\n    var size = prepareSizeAndPosition(originalSize, options);\n    if (!size.srcWidth || !size.srcHeight || !size.destWidth || !size.destHeight) {\n      var error = getError(\"incorrect sizes for resource \\\"\".concat(getSrc(resource), \"\\\"\"));\n      outputError(error, options.silent);\n      return this.prepareResult(defaultColor, error);\n    }\n    if (!this.canvas) {\n      this.canvas = makeCanvas();\n      if (!this.canvas) {\n        var error = getError('OffscreenCanvas is not supported in this browser');\n        outputError(error, options.silent);\n        return this.prepareResult(defaultColor, error);\n      }\n    }\n    if (!this.ctx) {\n      this.ctx = this.canvas.getContext('2d', {\n        willReadFrequently: true\n      });\n      if (!this.ctx) {\n        var error = getError('Canvas Context 2D is not supported in this browser');\n        outputError(error, options.silent);\n        return this.prepareResult(defaultColor);\n      }\n      this.ctx.imageSmoothingEnabled = false;\n    }\n    this.canvas.width = size.destWidth;\n    this.canvas.height = size.destHeight;\n    try {\n      this.ctx.clearRect(0, 0, size.destWidth, size.destHeight);\n      this.ctx.drawImage(resource, size.srcLeft, size.srcTop, size.srcWidth, size.srcHeight, 0, 0, size.destWidth, size.destHeight);\n      var bitmapData = this.ctx.getImageData(0, 0, size.destWidth, size.destHeight).data;\n      return this.prepareResult(this.getColorFromArray4(bitmapData, options));\n    } catch (originalError) {\n      var error = getError(\"security error (CORS) for resource \".concat(getSrc(resource), \".\\nDetails: https://developer.mozilla.org/en/docs/Web/HTML/CORS_enabled_image\"));\n      outputError(error, options.silent);\n      !options.silent && console.error(originalError);\n      return this.prepareResult(defaultColor, error);\n    }\n  };\n  /**\n   * Get the average color from a array when 1 pixel is 4 bytes.\n   */\n  FastAverageColor.prototype.getColorFromArray4 = function (arr, options) {\n    options = options || {};\n    var bytesPerPixel = 4;\n    var arrLength = arr.length;\n    var defaultColor = getDefaultColor(options);\n    if (arrLength < bytesPerPixel) {\n      return defaultColor;\n    }\n    var len = arrLength - arrLength % bytesPerPixel;\n    var step = (options.step || 1) * bytesPerPixel;\n    var algorithm;\n    switch (options.algorithm || 'sqrt') {\n      case 'simple':\n        algorithm = simpleAlgorithm;\n        break;\n      case 'sqrt':\n        algorithm = sqrtAlgorithm;\n        break;\n      case 'dominant':\n        algorithm = dominantAlgorithm;\n        break;\n      default:\n        throw getError(\"\".concat(options.algorithm, \" is unknown algorithm\"));\n    }\n    return algorithm(arr, len, {\n      defaultColor: defaultColor,\n      ignoredColor: prepareIgnoredColor(options.ignoredColor),\n      step: step,\n      dominantDivider: options.dominantDivider\n    });\n  };\n  /**\n   * Get color data from value ([r, g, b, a]).\n   */\n  FastAverageColor.prototype.prepareResult = function (value, error) {\n    var rgb = value.slice(0, 3);\n    var rgba = [value[0], value[1], value[2], value[3] / 255];\n    var isDarkColor = isDark(value);\n    return {\n      value: [value[0], value[1], value[2], value[3]],\n      rgb: 'rgb(' + rgb.join(',') + ')',\n      rgba: 'rgba(' + rgba.join(',') + ')',\n      hex: arrayToHex(rgb),\n      hexa: arrayToHex(value),\n      isDark: isDarkColor,\n      isLight: !isDarkColor,\n      error: error\n    };\n  };\n  /**\n   * Destroy the instance.\n   */\n  FastAverageColor.prototype.destroy = function () {\n    if (this.canvas) {\n      this.canvas.width = 1;\n      this.canvas.height = 1;\n      this.canvas = null;\n    }\n    this.ctx = null;\n  };\n  FastAverageColor.prototype.bindImageEvents = function (resource, options) {\n    var _this = this;\n    return new Promise(function (resolve, reject) {\n      var onload = function () {\n        unbindEvents();\n        var result = _this.getColor(resource, options);\n        if (result.error) {\n          reject(result.error);\n        } else {\n          resolve(result);\n        }\n      };\n      var onerror = function () {\n        unbindEvents();\n        reject(getError(\"Error loading image \\\"\".concat(resource.src, \"\\\"\")));\n      };\n      var onabort = function () {\n        unbindEvents();\n        reject(getError(\"Image \\\"\".concat(resource.src, \"\\\" loading aborted\")));\n      };\n      var unbindEvents = function () {\n        resource.removeEventListener('load', onload);\n        resource.removeEventListener('error', onerror);\n        resource.removeEventListener('abort', onabort);\n      };\n      resource.addEventListener('load', onload);\n      resource.addEventListener('error', onerror);\n      resource.addEventListener('abort', onabort);\n    });\n  };\n  return FastAverageColor;\n}();\nexport { FastAverageColor };","map":{"version":3,"names":["toHex","num","str","toString","length","arrayToHex","arr","map","join","isDark","color","result","prepareIgnoredColor","isRGBArray","value","Array","isArray","isIgnoredColor","data","index","ignoredColor","i","isIgnoredColorAsNumbers","isIgnoredRGBColor","isIgnoredRGBAColor","isIgnoredRGBAColorWithThreshold","inRange","colorComponent","ignoredColorComponent","redIgnored","greenIgnored","blueIgnored","alphaIgnored","threshold","alphaData","alphaInRange","DEFAULT_DOMINANT_DIVIDER","dominantAlgorithm","len","options","colorHash","divider","dominantDivider","step","max","red","green","blue","alpha","key","Math","round","redTotal","greenTotal","blueTotal","alphaTotal","count","defaultColor","simpleAlgorithm","sqrtAlgorithm","sqrt","getDefaultColor","getOption","name","defaultValue","undefined","MIN_SIZE","MAX_SIZE","isSvg","filename","search","getOriginalSize","resource","isInstanceOfHTMLImageElement","width","naturalWidth","height","naturalHeight","src","isInstanceOfHTMLVideoElement","videoWidth","videoHeight","getSrc","isInstanceOfHTMLCanvasElement","isInstanceOfOffscreenCanvas","isInstanceOfImageBitmap","HTMLImageElement","hasOffscreenCanvas","OffscreenCanvas","HTMLVideoElement","HTMLCanvasElement","ImageBitmap","prepareSizeAndPosition","originalSize","srcLeft","srcTop","srcWidth","srcHeight","destWidth","destHeight","mode","factor","isWebWorkers","window","makeCanvas","document","createElement","ERROR_PREFIX","getError","message","Error","outputError","error","silent","console","FastAverageColor","canvas","ctx","prototype","getColorAsync","Promise","reject","Image","img","crossOrigin","bindImageEvents","complete","getColor","resolve","prepareResult","size","concat","getContext","willReadFrequently","imageSmoothingEnabled","clearRect","drawImage","bitmapData","getImageData","getColorFromArray4","originalError","bytesPerPixel","arrLength","algorithm","rgb","slice","rgba","isDarkColor","hex","hexa","isLight","destroy","_this","onload","unbindEvents","onerror","onabort","removeEventListener","addEventListener"],"sources":["/Users/ayush/Adev/soundscapes/frontend/node_modules/fast-average-color/dist/index.esm.js"],"sourcesContent":["/*! Fast Average Color | Â© 2023 Denis Seleznev | MIT License | https://github.com/fast-average-color/fast-average-color */\nfunction toHex(num) {\n    var str = num.toString(16);\n    return str.length === 1 ? '0' + str : str;\n}\nfunction arrayToHex(arr) {\n    return '#' + arr.map(toHex).join('');\n}\nfunction isDark(color) {\n    // http://www.w3.org/TR/AERT#color-contrast\n    var result = (color[0] * 299 + color[1] * 587 + color[2] * 114) / 1000;\n    return result < 128;\n}\nfunction prepareIgnoredColor(color) {\n    if (!color) {\n        return [];\n    }\n    return isRGBArray(color) ? color : [color];\n}\nfunction isRGBArray(value) {\n    return Array.isArray(value[0]);\n}\nfunction isIgnoredColor(data, index, ignoredColor) {\n    for (var i = 0; i < ignoredColor.length; i++) {\n        if (isIgnoredColorAsNumbers(data, index, ignoredColor[i])) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction isIgnoredColorAsNumbers(data, index, ignoredColor) {\n    switch (ignoredColor.length) {\n        case 3:\n            // [red, green, blue]\n            if (isIgnoredRGBColor(data, index, ignoredColor)) {\n                return true;\n            }\n            break;\n        case 4:\n            // [red, green, blue, alpha]\n            if (isIgnoredRGBAColor(data, index, ignoredColor)) {\n                return true;\n            }\n            break;\n        case 5:\n            // [red, green, blue, alpha, threshold]\n            if (isIgnoredRGBAColorWithThreshold(data, index, ignoredColor)) {\n                return true;\n            }\n            break;\n        default:\n            return false;\n    }\n}\nfunction isIgnoredRGBColor(data, index, ignoredColor) {\n    // Ignore if the pixel are transparent.\n    if (data[index + 3] !== 255) {\n        return true;\n    }\n    if (data[index] === ignoredColor[0] &&\n        data[index + 1] === ignoredColor[1] &&\n        data[index + 2] === ignoredColor[2]) {\n        return true;\n    }\n    return false;\n}\nfunction isIgnoredRGBAColor(data, index, ignoredColor) {\n    if (data[index + 3] && ignoredColor[3]) {\n        return data[index] === ignoredColor[0] &&\n            data[index + 1] === ignoredColor[1] &&\n            data[index + 2] === ignoredColor[2] &&\n            data[index + 3] === ignoredColor[3];\n    }\n    // Ignore rgb components if the pixel are fully transparent.\n    return data[index + 3] === ignoredColor[3];\n}\nfunction inRange(colorComponent, ignoredColorComponent, value) {\n    return colorComponent >= (ignoredColorComponent - value) &&\n        colorComponent <= (ignoredColorComponent + value);\n}\nfunction isIgnoredRGBAColorWithThreshold(data, index, ignoredColor) {\n    var redIgnored = ignoredColor[0];\n    var greenIgnored = ignoredColor[1];\n    var blueIgnored = ignoredColor[2];\n    var alphaIgnored = ignoredColor[3];\n    var threshold = ignoredColor[4];\n    var alphaData = data[index + 3];\n    var alphaInRange = inRange(alphaData, alphaIgnored, threshold);\n    if (!alphaIgnored) {\n        return alphaInRange;\n    }\n    if (!alphaData && alphaInRange) {\n        return true;\n    }\n    if (inRange(data[index], redIgnored, threshold) &&\n        inRange(data[index + 1], greenIgnored, threshold) &&\n        inRange(data[index + 2], blueIgnored, threshold) &&\n        alphaInRange) {\n        return true;\n    }\n    return false;\n}\n\nvar DEFAULT_DOMINANT_DIVIDER = 24;\nfunction dominantAlgorithm(arr, len, options) {\n    var colorHash = {};\n    var divider = options.dominantDivider || DEFAULT_DOMINANT_DIVIDER;\n    var ignoredColor = options.ignoredColor;\n    var step = options.step;\n    var max = [0, 0, 0, 0, 0];\n    for (var i = 0; i < len; i += step) {\n        var red = arr[i];\n        var green = arr[i + 1];\n        var blue = arr[i + 2];\n        var alpha = arr[i + 3];\n        if (ignoredColor && isIgnoredColor(arr, i, ignoredColor)) {\n            continue;\n        }\n        var key = Math.round(red / divider) + ',' +\n            Math.round(green / divider) + ',' +\n            Math.round(blue / divider);\n        if (colorHash[key]) {\n            colorHash[key] = [\n                colorHash[key][0] + red * alpha,\n                colorHash[key][1] + green * alpha,\n                colorHash[key][2] + blue * alpha,\n                colorHash[key][3] + alpha,\n                colorHash[key][4] + 1\n            ];\n        }\n        else {\n            colorHash[key] = [red * alpha, green * alpha, blue * alpha, alpha, 1];\n        }\n        if (max[4] < colorHash[key][4]) {\n            max = colorHash[key];\n        }\n    }\n    var redTotal = max[0];\n    var greenTotal = max[1];\n    var blueTotal = max[2];\n    var alphaTotal = max[3];\n    var count = max[4];\n    return alphaTotal ? [\n        Math.round(redTotal / alphaTotal),\n        Math.round(greenTotal / alphaTotal),\n        Math.round(blueTotal / alphaTotal),\n        Math.round(alphaTotal / count)\n    ] : options.defaultColor;\n}\n\nfunction simpleAlgorithm(arr, len, options) {\n    var redTotal = 0;\n    var greenTotal = 0;\n    var blueTotal = 0;\n    var alphaTotal = 0;\n    var count = 0;\n    var ignoredColor = options.ignoredColor;\n    var step = options.step;\n    for (var i = 0; i < len; i += step) {\n        var alpha = arr[i + 3];\n        var red = arr[i] * alpha;\n        var green = arr[i + 1] * alpha;\n        var blue = arr[i + 2] * alpha;\n        if (ignoredColor && isIgnoredColor(arr, i, ignoredColor)) {\n            continue;\n        }\n        redTotal += red;\n        greenTotal += green;\n        blueTotal += blue;\n        alphaTotal += alpha;\n        count++;\n    }\n    return alphaTotal ? [\n        Math.round(redTotal / alphaTotal),\n        Math.round(greenTotal / alphaTotal),\n        Math.round(blueTotal / alphaTotal),\n        Math.round(alphaTotal / count)\n    ] : options.defaultColor;\n}\n\nfunction sqrtAlgorithm(arr, len, options) {\n    var redTotal = 0;\n    var greenTotal = 0;\n    var blueTotal = 0;\n    var alphaTotal = 0;\n    var count = 0;\n    var ignoredColor = options.ignoredColor;\n    var step = options.step;\n    for (var i = 0; i < len; i += step) {\n        var red = arr[i];\n        var green = arr[i + 1];\n        var blue = arr[i + 2];\n        var alpha = arr[i + 3];\n        if (ignoredColor && isIgnoredColor(arr, i, ignoredColor)) {\n            continue;\n        }\n        redTotal += red * red * alpha;\n        greenTotal += green * green * alpha;\n        blueTotal += blue * blue * alpha;\n        alphaTotal += alpha;\n        count++;\n    }\n    return alphaTotal ? [\n        Math.round(Math.sqrt(redTotal / alphaTotal)),\n        Math.round(Math.sqrt(greenTotal / alphaTotal)),\n        Math.round(Math.sqrt(blueTotal / alphaTotal)),\n        Math.round(alphaTotal / count)\n    ] : options.defaultColor;\n}\n\nfunction getDefaultColor(options) {\n    return getOption(options, 'defaultColor', [0, 0, 0, 0]);\n}\nfunction getOption(options, name, defaultValue) {\n    return (options[name] === undefined ? defaultValue : options[name]);\n}\n\nvar MIN_SIZE = 10;\nvar MAX_SIZE = 100;\nfunction isSvg(filename) {\n    return filename.search(/\\.svg(\\?|$)/i) !== -1;\n}\nfunction getOriginalSize(resource) {\n    if (isInstanceOfHTMLImageElement(resource)) {\n        var width = resource.naturalWidth;\n        var height = resource.naturalHeight;\n        // For SVG images with only viewBox attribute\n        if (!resource.naturalWidth && isSvg(resource.src)) {\n            width = height = MAX_SIZE;\n        }\n        return {\n            width: width,\n            height: height,\n        };\n    }\n    if (isInstanceOfHTMLVideoElement(resource)) {\n        return {\n            width: resource.videoWidth,\n            height: resource.videoHeight\n        };\n    }\n    return {\n        width: resource.width,\n        height: resource.height\n    };\n}\nfunction getSrc(resource) {\n    if (isInstanceOfHTMLCanvasElement(resource)) {\n        return 'canvas';\n    }\n    if (isInstanceOfOffscreenCanvas(resource)) {\n        return 'offscreencanvas';\n    }\n    if (isInstanceOfImageBitmap(resource)) {\n        return 'imagebitmap';\n    }\n    return resource.src;\n}\nfunction isInstanceOfHTMLImageElement(resource) {\n    return typeof HTMLImageElement !== 'undefined' && resource instanceof HTMLImageElement;\n}\nvar hasOffscreenCanvas = typeof OffscreenCanvas !== 'undefined';\nfunction isInstanceOfOffscreenCanvas(resource) {\n    return hasOffscreenCanvas && resource instanceof OffscreenCanvas;\n}\nfunction isInstanceOfHTMLVideoElement(resource) {\n    return typeof HTMLVideoElement !== 'undefined' && resource instanceof HTMLVideoElement;\n}\nfunction isInstanceOfHTMLCanvasElement(resource) {\n    return typeof HTMLCanvasElement !== 'undefined' && resource instanceof HTMLCanvasElement;\n}\nfunction isInstanceOfImageBitmap(resource) {\n    return typeof ImageBitmap !== 'undefined' && resource instanceof ImageBitmap;\n}\nfunction prepareSizeAndPosition(originalSize, options) {\n    var srcLeft = getOption(options, 'left', 0);\n    var srcTop = getOption(options, 'top', 0);\n    var srcWidth = getOption(options, 'width', originalSize.width);\n    var srcHeight = getOption(options, 'height', originalSize.height);\n    var destWidth = srcWidth;\n    var destHeight = srcHeight;\n    if (options.mode === 'precision') {\n        return {\n            srcLeft: srcLeft,\n            srcTop: srcTop,\n            srcWidth: srcWidth,\n            srcHeight: srcHeight,\n            destWidth: destWidth,\n            destHeight: destHeight\n        };\n    }\n    var factor;\n    if (srcWidth > srcHeight) {\n        factor = srcWidth / srcHeight;\n        destWidth = MAX_SIZE;\n        destHeight = Math.round(destWidth / factor);\n    }\n    else {\n        factor = srcHeight / srcWidth;\n        destHeight = MAX_SIZE;\n        destWidth = Math.round(destHeight / factor);\n    }\n    if (destWidth > srcWidth || destHeight > srcHeight ||\n        destWidth < MIN_SIZE || destHeight < MIN_SIZE) {\n        destWidth = srcWidth;\n        destHeight = srcHeight;\n    }\n    return {\n        srcLeft: srcLeft,\n        srcTop: srcTop,\n        srcWidth: srcWidth,\n        srcHeight: srcHeight,\n        destWidth: destWidth,\n        destHeight: destHeight\n    };\n}\nvar isWebWorkers = typeof window === 'undefined';\nfunction makeCanvas() {\n    if (isWebWorkers) {\n        return hasOffscreenCanvas ? new OffscreenCanvas(1, 1) : null;\n    }\n    return document.createElement('canvas');\n}\n\nvar ERROR_PREFIX = 'FastAverageColor: ';\nfunction getError(message) {\n    return Error(ERROR_PREFIX + message);\n}\nfunction outputError(error, silent) {\n    if (!silent) {\n        console.error(error);\n    }\n}\n\nvar FastAverageColor = /** @class */ (function () {\n    function FastAverageColor() {\n        this.canvas = null;\n        this.ctx = null;\n    }\n    FastAverageColor.prototype.getColorAsync = function (resource, options) {\n        if (!resource) {\n            return Promise.reject(getError('call .getColorAsync() without resource'));\n        }\n        if (typeof resource === 'string') {\n            // Web workers\n            if (typeof Image === 'undefined') {\n                return Promise.reject(getError('resource as string is not supported in this environment'));\n            }\n            var img = new Image();\n            img.crossOrigin = options && options.crossOrigin || '';\n            img.src = resource;\n            return this.bindImageEvents(img, options);\n        }\n        else if (isInstanceOfHTMLImageElement(resource) && !resource.complete) {\n            return this.bindImageEvents(resource, options);\n        }\n        else {\n            var result = this.getColor(resource, options);\n            return result.error ? Promise.reject(result.error) : Promise.resolve(result);\n        }\n    };\n    /**\n     * Get the average color from images, videos and canvas.\n     */\n    FastAverageColor.prototype.getColor = function (resource, options) {\n        options = options || {};\n        var defaultColor = getDefaultColor(options);\n        if (!resource) {\n            var error = getError('call .getColor() without resource');\n            outputError(error, options.silent);\n            return this.prepareResult(defaultColor, error);\n        }\n        var originalSize = getOriginalSize(resource);\n        var size = prepareSizeAndPosition(originalSize, options);\n        if (!size.srcWidth || !size.srcHeight || !size.destWidth || !size.destHeight) {\n            var error = getError(\"incorrect sizes for resource \\\"\".concat(getSrc(resource), \"\\\"\"));\n            outputError(error, options.silent);\n            return this.prepareResult(defaultColor, error);\n        }\n        if (!this.canvas) {\n            this.canvas = makeCanvas();\n            if (!this.canvas) {\n                var error = getError('OffscreenCanvas is not supported in this browser');\n                outputError(error, options.silent);\n                return this.prepareResult(defaultColor, error);\n            }\n        }\n        if (!this.ctx) {\n            this.ctx = this.canvas.getContext('2d', { willReadFrequently: true });\n            if (!this.ctx) {\n                var error = getError('Canvas Context 2D is not supported in this browser');\n                outputError(error, options.silent);\n                return this.prepareResult(defaultColor);\n            }\n            this.ctx.imageSmoothingEnabled = false;\n        }\n        this.canvas.width = size.destWidth;\n        this.canvas.height = size.destHeight;\n        try {\n            this.ctx.clearRect(0, 0, size.destWidth, size.destHeight);\n            this.ctx.drawImage(resource, size.srcLeft, size.srcTop, size.srcWidth, size.srcHeight, 0, 0, size.destWidth, size.destHeight);\n            var bitmapData = this.ctx.getImageData(0, 0, size.destWidth, size.destHeight).data;\n            return this.prepareResult(this.getColorFromArray4(bitmapData, options));\n        }\n        catch (originalError) {\n            var error = getError(\"security error (CORS) for resource \".concat(getSrc(resource), \".\\nDetails: https://developer.mozilla.org/en/docs/Web/HTML/CORS_enabled_image\"));\n            outputError(error, options.silent);\n            !options.silent && console.error(originalError);\n            return this.prepareResult(defaultColor, error);\n        }\n    };\n    /**\n     * Get the average color from a array when 1 pixel is 4 bytes.\n     */\n    FastAverageColor.prototype.getColorFromArray4 = function (arr, options) {\n        options = options || {};\n        var bytesPerPixel = 4;\n        var arrLength = arr.length;\n        var defaultColor = getDefaultColor(options);\n        if (arrLength < bytesPerPixel) {\n            return defaultColor;\n        }\n        var len = arrLength - arrLength % bytesPerPixel;\n        var step = (options.step || 1) * bytesPerPixel;\n        var algorithm;\n        switch (options.algorithm || 'sqrt') {\n            case 'simple':\n                algorithm = simpleAlgorithm;\n                break;\n            case 'sqrt':\n                algorithm = sqrtAlgorithm;\n                break;\n            case 'dominant':\n                algorithm = dominantAlgorithm;\n                break;\n            default:\n                throw getError(\"\".concat(options.algorithm, \" is unknown algorithm\"));\n        }\n        return algorithm(arr, len, {\n            defaultColor: defaultColor,\n            ignoredColor: prepareIgnoredColor(options.ignoredColor),\n            step: step,\n            dominantDivider: options.dominantDivider,\n        });\n    };\n    /**\n     * Get color data from value ([r, g, b, a]).\n     */\n    FastAverageColor.prototype.prepareResult = function (value, error) {\n        var rgb = value.slice(0, 3);\n        var rgba = [value[0], value[1], value[2], value[3] / 255];\n        var isDarkColor = isDark(value);\n        return {\n            value: [value[0], value[1], value[2], value[3]],\n            rgb: 'rgb(' + rgb.join(',') + ')',\n            rgba: 'rgba(' + rgba.join(',') + ')',\n            hex: arrayToHex(rgb),\n            hexa: arrayToHex(value),\n            isDark: isDarkColor,\n            isLight: !isDarkColor,\n            error: error,\n        };\n    };\n    /**\n     * Destroy the instance.\n     */\n    FastAverageColor.prototype.destroy = function () {\n        if (this.canvas) {\n            this.canvas.width = 1;\n            this.canvas.height = 1;\n            this.canvas = null;\n        }\n        this.ctx = null;\n    };\n    FastAverageColor.prototype.bindImageEvents = function (resource, options) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            var onload = function () {\n                unbindEvents();\n                var result = _this.getColor(resource, options);\n                if (result.error) {\n                    reject(result.error);\n                }\n                else {\n                    resolve(result);\n                }\n            };\n            var onerror = function () {\n                unbindEvents();\n                reject(getError(\"Error loading image \\\"\".concat(resource.src, \"\\\"\")));\n            };\n            var onabort = function () {\n                unbindEvents();\n                reject(getError(\"Image \\\"\".concat(resource.src, \"\\\" loading aborted\")));\n            };\n            var unbindEvents = function () {\n                resource.removeEventListener('load', onload);\n                resource.removeEventListener('error', onerror);\n                resource.removeEventListener('abort', onabort);\n            };\n            resource.addEventListener('load', onload);\n            resource.addEventListener('error', onerror);\n            resource.addEventListener('abort', onabort);\n        });\n    };\n    return FastAverageColor;\n}());\n\nexport { FastAverageColor };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}